package soduko;

import java.awt.*;
import javax.swing.*;



@SuppressWarnings("serial")
public class GUI extends JFrame {
	public Solver solver;							// The solver solving the soduko.
	private JFrame frame;							// The window.
	private JPanel northPanel;					// The panel containing the text fields
	public JTextField[][] fields;						// The matrix of text fields for showing numbers.
	private JLabel errorlabel;						// The error message displayed if the soduko is unsolvable.

	/**
	 * Creates the window with empty colored tiles for numbers.
	 * 
	 */
	public GUI() {
		solver = new Solver();

		frame = new JFrame("Soduko");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		northPanel = new JPanel();
		GridLayout layout = new GridLayout(9, 9);
		northPanel.setLayout(layout);
		frame.add(northPanel, BorderLayout.NORTH);
		fields = new JTextField[9][9];
		
		redraw();

		JPanel southPanel = new JPanel();
		frame.add(southPanel, BorderLayout.SOUTH);
		southPanel.add(new ClearButton(this));
		southPanel.add(new SolveButton(this));
		frame.pack();
		frame.setVisible(true);
	}
	
	/**
	 * Redraws the window with colored tiles for numbers.
	 * 
	 */
	public void redraw() {
		for (int r = 0; r < 9; r++) {
			for (int c = 0; c < 9; c++) {
				JTextField field = new JTextField(null);
				int section = ((c/3)+1) + ((r/3)*3);
				if (section % 2 == 1) {
					field.setBackground(Color.lightGray);
				}
				fields[c][r] = field;
				northPanel.add(field);
			}
		}
	}
	
	/**
	 * Solves the soduko and displays the solution in the window.
	 * 
	 */
	public void solve() {
		solver.clear();
		if (errorlabel != null) {
			frame.remove(errorlabel);
		}
		frame.pack();
		for (int r = 0; r < 9; r++) {
			for (int c = 0; c < 9; c++) {
				if (fields[c][r] != null
						&& !fields[c][r].getText().equals(new String(""))) {
					try {
						Integer num = Integer.parseInt(fields[c][r].getText());
						solver.add(num, c, r);
					} catch (NumberFormatException e) {
						System.err.println("Felaktig formatering");
						break;
					}
				}
			}
		}
		if (solver.solve()) {
			Unit[][] numbers = solver.getNumbers();
			northPanel.removeAll();
			for (int r = 0; r < 9; r++) {
				for (int c = 0; c < 9; c++) {
					if (numbers[c][r] != null) {
						Integer num = numbers[c][r].getNumber();
						JTextField field = new JTextField(num.toString());
						if (numbers[c][r].getSection() % 2 == 1) {
							field.setBackground(Color.lightGray);
						}
						northPanel.add(field);
					}
				}
			}
		} else {
			errorlabel = new JLabel("OlÃ¶sligt soduko.");
			errorlabel.setForeground (Color.red);
			frame.add(errorlabel);
			frame.pack();
		}
		frame.revalidate();
	}

	/**
	 * Clears and redraws the window.
	 * 
	 */
	public void clear() {
		solver.clear();
		if (errorlabel != null) {
			frame.remove(errorlabel);
		}
		northPanel.removeAll();
		redraw();
		frame.pack();
	}
}
