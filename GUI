package sudoku;

import java.awt.*;
import javax.swing.*;

@SuppressWarnings("serial")
public class GUI extends JFrame {
	private Solver solver; // The solver solving the sudoku.
	private JFrame frame; // The window.
	private JPanel northPanel; // The panel containing the text fields
	private JTextField[][] fields; // The matrix of text fields for showing
									// numbers.
	private JLabel errorlabel; // The error message displayed if the sudoku is
								// unsolvable.

	/**
	 * Creates the window with empty colored tiles for numbers.
	 * 
	 */
	public GUI() {
		solver = new Solver();

		frame = new JFrame("sudoku");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		northPanel = new JPanel();
		GridLayout layout = new GridLayout(9, 9);
		northPanel.setLayout(layout);
		frame.add(northPanel, BorderLayout.NORTH);
		fields = new JTextField[9][9];

		redraw();

		JPanel southPanel = new JPanel();
		frame.add(southPanel, BorderLayout.SOUTH);
		southPanel.add(new ClearButton(this));
		southPanel.add(new SolveButton(this));
		frame.pack();
		frame.setVisible(true);
	}

	/**
	 * Redraws the window with colored tiles for every other section of numbers.
	 * 
	 */
	public void redraw() {
		for (int r = 0; r < 9; r++) {
			for (int c = 0; c < 9; c++) {
				JTextField field = new JTextField(1);
				int section = ((c / 3) + 1) + ((r / 3) * 3);
				if (section % 2 == 1) {
					field.setBackground(Color.lightGray);
				}
				fields[c][r] = field;
				northPanel.add(field);
			}
		}
	}

	/**
	 * Solves the sudoku and displays the solution in the window.
	 * 
	 * @throws NumberFormatException if the JTextField strings are unable to be
	 *          converted to Integer
	 */
	public void solve() {
		boolean unsolvable = false;
		solver.clear();
		if (errorlabel != null) {
			frame.remove(errorlabel);
		}
		frame.pack();
		for (int r = 0; r < 9; r++) {
			for (int c = 0; c < 9; c++) {
				if (fields[c][r] != null
						&& !fields[c][r].getText().equals(new String(""))) {
					try {
						Integer num = Integer.parseInt(fields[c][r].getText());
						if (solver.checkUnit(new Unit(num, c, r, true)) && num < 10 && num > 0) {
							solver.add(num, c, r);
						} else {
							errorlabel = new JLabel("Ogiltig inmatning.");
							errorlabel.setForeground(Color.red);
							frame.add(errorlabel);
							frame.pack();
							unsolvable = true;
						}
					} catch (NumberFormatException e) {
					}
				}
			}
		}
		if (solver.solve() && !unsolvable) {
			northPanel.removeAll();
			for (int r = 0; r < 9; r++) {
				for (int c = 0; c < 9; c++) {
					if (solver.getUnit(c, r) != null) {
						Integer num = solver.getUnit(c, r).getNumber();
						JTextField field = new JTextField(num.toString());
						if (solver.getUnit(c, r).getSection() % 2 == 1) {
							field.setBackground(Color.lightGray);
						}
						northPanel.add(field);
					}
				}
			}
		} else if (!unsolvable) {
			errorlabel = new JLabel("OlÃ¶sligt sudoku.");
			errorlabel.setForeground(Color.red);
			frame.add(errorlabel);
			frame.pack();
		}
		frame.revalidate();
	}

	/**
	 * Clears and redraws the window.
	 * 
	 */
	public void clear() {
		solver.clear();
		if (errorlabel != null) {
			frame.remove(errorlabel);
		}
		northPanel.removeAll();
		redraw();
		frame.pack();
	}
}
