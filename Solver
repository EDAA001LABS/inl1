package soduko;

public class Solver {
	private Unit[][] numbers; 				// The matrix containing the numbers for the soduko.

	public Solver() {
		numbers = new Unit[9][9];
	}

	/**
	 * Adds the specified number at the specific column and row to the Soduko.
	 * 
	 * @param num
	 *            The Soduko number
	 * @param c
	 *            Column from the left (0) to the right (8)
	 * @param r
	 *            Row from the top (0) down (8)
	 * 
	 * @return true if the number was added
	 */
	public boolean add(int num, int c, int r) {
		if (num > 0 && num < 10 && c >= 0 && c < 9 && r >= 0 && r < 9) {
			Unit unit = new Unit(num, c, r, true);
			numbers[c][r] = unit;
			return true;
		}
		return false;
	}

	/**
	 * Checks if the specified unit is legal.
	 * 
	 * @param unit
	 *            The Unit to be checked
	 * 
	 * @return true if the unit is placed in a legal position
	 */

	public boolean checkUnit(Unit unit) {
		if (unit == null) {
			return false;
		}
		for (int r = 0; r < 9; r++) {
			for (int c = 0; c < 9; c++) {
				if (numbers[c][r] != null) {
					if (c != unit.getColumn() || r != unit.getRow()) {
						if ((((c == unit.getColumn()) || r == unit.getRow()))
								|| (((c / 3) + 1) + ((r / 3) * 3)) == unit
										.getSection()) {
							if (numbers[c][r].getNumber() == unit.getNumber()) {
								return false;
							}
						}
					}
				}
			}
		}
		return true;
	}

	/**
	 * Increments the number by 1. If the numbers is 9 the number is set to 1
	 * and the column is incremented. If the column is 9 the column is set to 1
	 * and the row is incremented The section value is automatically updated
	 * when the column or row is changed.
	 * 
	 * @param unit
	 *            The Unit to be incremented
	 * 
	 * @return true if the unit was successfully incremented, and the resulting
	 *         position is inside the matrix.
	 */
	public boolean increment(Unit unit) {
		unit.setNumber(unit.getNumber() + 1);
		if (unit.getNumber() > 9) {
			unit.setColumn(unit.getColumn() + 1);
			unit.setNumber(1);
			if (unit.getColumn() > 8) {
				unit.setColumn(0);
				unit.setRow(unit.getRow() + 1);
				if (unit.getRow() > 8) {
					return false;
				}
			}
		}
		return true;
	}

	/**
	 * Increments the column. If the column was 9 the
	 * column is set to 1 and the row is incremented. The section value is
	 * automatically updated when the column or row is changed.
	 * 
	 * @param unit
	 *            The Unit to be checked
	 * 
	 * @return true if the unit was successfully incremented, and the resulting
	 *         position is inside the matrix.
	 */
	public boolean incrementColumn(Unit unit) {
		unit.setColumn(unit.getColumn() + 1);
		if (unit.getColumn() > 8) {
			unit.setColumn(0);
			unit.setRow(unit.getRow() + 1);
			if (unit.getRow() > 8) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Prints the numbers of the units in the soduko board. If a slot is empty
	 * "X" is printed
	 * 
	 */
	public void printAll() {
		for (int r = 0; r < 9; r++) {
			for (int c = 0; c < 9; c++) {
				if (numbers[c][r] != null) {
					System.out.print(numbers[c][r].getNumber() + " ");
				} else {
					System.out.print('X' + " ");
				}
			}
			System.out.println();
		}
	}

	public boolean solve() {
		Unit unit = new Unit(1, 0, 0, false);
		return solve(unit);
	}

	/**
	 * Solves the soduko using recursion and backtracking.
	 * 
	 * @param unit
	 *            The initial unit.
	 * 
	 * @return true if the soduko has any solution.
	 */
	public boolean solve(Unit unit) {
		if (unit.getColumn() == 8 && unit.getRow() == 8
				&& checkUnit(numbers[8][8])) {
			return true;
		}

		if (numbers[unit.getColumn()][unit.getRow()] == null) {
			for (int i = 1; i < 10; i++) {
				numbers[unit.getColumn()][unit.getRow()] = new Unit(i,
						unit.getColumn(), unit.getRow(), false);
				if (solve(new Unit(i, unit.getColumn(), unit.getRow(), false))) {
					return true;
				}
			}
			numbers[unit.getColumn()][unit.getRow()] = null;
			return false;
		}

		else {
			if (checkUnit(numbers[unit.getColumn()][unit.getRow()])) {
				Unit newUnit = new Unit(unit.getNumber(), unit.getColumn(), unit.getRow(), false);
				incrementColumn(newUnit);
				return solve(newUnit);
			} else {
				if (!numbers[unit.getColumn()][unit.getRow()].getOriginal()) {
					numbers[unit.getColumn()][unit.getRow()] = null;
					return false;
				} else {
					return false;
				}

			}
		}
	}

	/**
	 * Returns the set of Units in the soduko.
	 * 
	 * @return the set of Units in the soduko.
	 */
	public Unit[][] getNumbers() {
		return numbers;
	}

	/**
	 * Clears the set of units.
	 * 
	 */
	public void clear() {
		for (int r = 0; r < 9; r++) {
			for (int c = 0; c < 9; c++) {
				numbers[c][r] = null;
			}
		}
	}
}
